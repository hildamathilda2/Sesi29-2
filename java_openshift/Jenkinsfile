pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "hfrnssc/java-openshift-jenkins"
        DOCKER_CREDENTIALS_ID = "docker-hub-hilda"
        GITHUB_REPO = "https://github.com/hildamathilda2/Sesi29-2"
        OPENSHIFT_PROJECT = "hildamathilda7-dev"
        OPENSHIFT_SERVER = "https://api.rm1.0a51.p1.openshiftapps.com:6443"
        OPENSHIFT_TOKEN = credentials('openshift-token-hilda')
        OPENSHIFT_TOKEN_2 = credentials('openshift-token-najah')
        OPENSHIFT_TOKEN_3 = credentials('openshift-token-pandu')
        OPENSHIFT_TOKEN_4= credentials('openshift-token-bintang')
        OPENSHIFT_TOKEN_5= credentials('openshift-token-fayyadh')
        WEBHOOK_URL = "https://40eb58de703d.ngrok-free.app/github-webhook/"
    }

    stages {
        stage('Clone GitHub Repo') {
            steps {
                git url: "${env.GITHUB_REPO}", branch: 'main'
            }
        }

        stage('Set Docker Tag') {
            steps {
                script {
                    env.DOCKER_TAG = "v${env.BUILD_NUMBER}"
                    echo " Docker tag: ${env.DOCKER_TAG}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image: ${DOCKER_IMAGE}:${env.DOCKER_TAG}"
                    docker.build("${DOCKER_IMAGE}:${env.DOCKER_TAG}", "-f java_openshift/Dockerfile java_openshift")
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub"
                    docker.withRegistry('', "${DOCKER_CREDENTIALS_ID}") {
                        docker.image("${DOCKER_IMAGE}:${env.DOCKER_TAG}").push()
                    }
                }
            }
        }

        stage('Generate Deployment YAML') {
            steps {
                script {
                    def baseYaml = readFile('java_openshift/base-deployment.yaml')
                    def updatedYaml = baseYaml.replaceAll(
                        "__IMAGE_TAG__", env.DOCKER_TAG
                    )
                    writeFile file: 'deployment.yaml', text: updatedYaml
                    echo "YAML updated with image tag: ${env.DOCKER_TAG}"
                }
            }
        }

        stage('Generate HAProxy YAML') {
              steps {
                 script {
                    def haproxyConfig = readFile('java_openshift/haproxy-config-jo.yml')
                    def haproxyDeployment = readFile('java_openshift/haproxy-deployment-jo.yml')
                    def haproxyService = readFile('java_openshift/haproxy-service-jo.yml')

                    writeFile file: 'haproxy-config-jo.yml', text: haproxyConfig
                    writeFile file: 'haproxy-deployment-jo.yml', text: haproxyDeployment
                    writeFile file: 'haproxy-service-jo.yml', text: haproxyService

                    echo "HAProxy YAML files generated and ready for deployment."
                 }
              }
        }

        stage('Apply to OpenShift') {
            steps {
                script {
                    def targets = [
                        [name: "hildamathilda7-dev", server: "https://api.rm1.0a51.p1.openshiftapps.com:6443", token: env.OPENSHIFT_TOKEN],
                        [name: "sayyidatun-dev", server: "https://api.rm1.0a51.p1.openshiftapps.com:6443", token: env.OPENSHIFT_TOKEN_2],
                        [name: "panduass-dev", server: "https://api.rm1.0a51.p1.openshiftapps.com:6443", token: env.OPENSHIFT_TOKEN_3],
                        [name: "abelitang2-dev", server: "https://api.rm3.7wse.p1.openshiftapps.com:6443", token: env.OPENSHIFT_TOKEN_4],
                        [name: "rmuhammadfayyadh-dev", server: "https://api.rm1.0a51.p1.openshiftapps.com:6443", token: env.OPENSHIFT_TOKEN_5]
                    ]

                    for (target in targets) {
                        echo "Deploying to project: ${target.name} on cluster: ${target.server}"

                        def loginStatus = sh(
                            script: "oc login ${target.server} --token=${target.token} --insecure-skip-tls-verify",
                            returnStatus: true
                         )
                        if (loginStatus != 0) {
                            error("Failed to login to cluster: ${target.server}")
                        }

                        def projectStatus = sh(
                            script: "oc project ${target.name}",
                            returnStatus: true
                        )
                        if (projectStatus != 0) {
                            error("Failed to switch to project: ${target.name}")
                        }

                        def applyStatus = sh(
                            script: "oc apply -f deployment.yaml",
                            returnStatus: true
                        )
                        def configStatus = sh(script: "oc apply -f haproxy-config-jo.yml", returnStatus: true)
                        def deployStatus = sh(script: "oc apply -f haproxy-deployment-jo.yml", returnStatus: true)
                        def serviceStatus = sh(script: "oc apply -f haproxy-service-jo.yml", returnStatus: true)

                        if (applyStatus != 0 || configStatus != 0 || deployStatus != 0 || serviceStatus != 0) {
                            error("Failed to apply deployment to project: ${target.name}")
                        }

                        sh "oc expose service haproxy-jo || true"

                        def haproxyRoute = sh(script: "oc get route haproxy-jo -o jsonpath='{.spec.host}'", returnStdout: true).trim()
                        echo "HAProxy Gateway deployed to ${target.name}. Access via: http://${haproxyRoute}"

                    }
                }
            }
        }
    }

    post {
         success {
            script {
                 def targets = [
                      [name: "hildamathilda7-dev", token: env.OPENSHIFT_TOKEN],
                      [name: "sayyidatun-dev", token: env.OPENSHIFT_TOKEN_2],
                      [name: "panduass-dev", token: env.OPENSHIFT_TOKEN_3],
                      [name: "abelitang2-dev", token: env.OPENSHIFT_TOKEN_4],
                      [name: "rmuhammadfayyadh-dev", token: env.OPENSHIFT_TOKEN_5]
                 ]

                 for (target in targets) {
                       echo "Checking routes for project: ${target.name}"

                       def loginStatus = sh(
                            script: "oc login ${env.OPENSHIFT_SERVER} --token=${target.token} --insecure-skip-tls-verify",
                            returnStatus: true
                       )
                       if (loginStatus != 0) {
                            echo "Failed to login to ${target.name}, skipping route check."
                            continue
                       }

                       def projectStatus = sh(
                            script: "oc project ${target.name}",
                            returnStatus: true
                       )
                       if (projectStatus != 0) {
                            echo "Failed to switch to ${target.name}, skipping route check."
                            continue
                       }

                        def appRoute = sh(script: "oc get route java-openshift-jenkins -o jsonpath='{.spec.host}'", returnStdout: true).trim()
                        def haproxyRoute = sh(script: "oc get route haproxy-jo -o jsonpath='{.spec.host}'", returnStdout: true).trim()

                        if (appRoute) {
                            echo "App route for ${target.name}: http://${appRoute}"
                        } else {
                            echo "App route not found in ${target.name}"
                        }

                        if (haproxyRoute) {
                            echo "HAProxy route for ${target.name}: http://${haproxyRoute}"
                        } else {
                            echo "HAProxy route not found in ${target.name}"
                        }
                 }
            }
         }

         failure {
             script {
                 def payload = """
                    {
                      "text": "Jenkins deployment failed for *java-openshift-jenkins* in build #${env.BUILD_NUMBER}",
                      "attachments": [
                        {
                          "color": "danger",
                          "title": "Job: ${env.JOB_NAME}",
                          "title_link": "${env.BUILD_URL}",
                          "text": "Check the Jenkins logs for more details."
                        }
                      ]
                    }
                    """
                    writeFile file: 'alert-payload.json', text: payload
                    sh "curl -X POST -H 'Content-type: application/json' --data @alert-payload.json ${env.WEBHOOK_URL}"
             }
         }
    }
}